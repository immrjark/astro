---
import ProductSlideshow from "@/components/products/ProductSlideshow.astro";
import MainLayout from "@/layouts/MainLayout.astro";
import { actions } from "astro:actions";

const { slug } = Astro.params;
const { data, error } = await actions.getProductsBySlug(slug ?? "");
// console.log({ data });

if (error) {
  return Astro.redirect("/404");
}

const { product, images } = data;
// console.log();

const theImage = images[0].image.startsWith("http")
  ? images[0].image
  : `${import.meta.env.PUBLIC_URL}/images/products/${images[0].image}`;
---

<!-- image={image} -->
<MainLayout
  title={product.title}
  description={product.description}
  image={theImage}
>
  <div class="grid grid-cols-1 md:grid-cols-3 w-full">
    <ProductSlideshow images={images.map((i) => i.image)} />

    <section>
      <h2 class="text-2xl font-bold">{product.title}</h2>
      <h2 class="font-bold">${product.price}</h2>

      <h3 class="mt-5">Tallas</h3>
      <ul class="flex gap-3">
        {
          product.sizes
            .split(",")
            .map((size) => <li data-size={size}>{size}</li>)
        }
      </ul>

      <h3 class="mt-5">Cantidad</h3>
      <div>
        <button class="btn-quantity">-</button>
        <input id="cuantity-input" type="number" min="1" value="1" />
        <button class="btn-quantity">+</button>
      </div>

      <button class="mt-5 bg-blue-500 text-white p-3 w-full"
        >Añadir al carrito</button
      >

      <h3 class="mt-10">Descripción</h3>
      <p>{product.description}</p>
    </section>
  </div>

  <input type="hidden" id="product-id" value={product.id} />
</MainLayout>

<script>
  import { itemInCart } from "@/store";
  import { CartCookiesClient } from "@/utils/cartCookies";
  import { navigate } from "astro:transitions/client";

  document.addEventListener("astro:page-load", () => {
    // necesito que esto esto envuelva todo por los ViewTransitions
    const sizeElements = document.querySelectorAll("li");

    // if (sizeElements.length === 0) {
    //   return;
    // }

    // esta función es para hacer activo la talla seleccionada
    sizeElements.forEach((liElement) => {
      liElement.addEventListener("click", (event) => {
        sizeElements.forEach((s) => s.classList.remove("selected-size"));
        liElement.classList.add("selected-size");
      });
    });

    const quantityInput = document.querySelector(
      "#cuantity-input",
    ) as HTMLInputElement;
    const productIdInput = document.querySelector(
      "#product-id",
    ) as HTMLInputElement;

    let quantity = 1; // para fijar seimpre la cantidad minima

    const [decrementBtn, incrementBtn, addToCardBtn] =
      document.querySelectorAll("button");

    // función para añadir elementos al card pero como mucho 5 seguidos
    incrementBtn.addEventListener("click", () => {
      quantity = Math.min(quantity + 1, 5);
      quantityInput.value = quantity.toString();
    });

    if (!incrementBtn || !quantityInput) return;

    // función para eliminar elementos al card pero como mínimo siempre 1
    decrementBtn.addEventListener("click", () => {
      quantity = Math.max(quantity - 1, 1);
      quantityInput.value = quantity.toString();
    });

    // add to card btn
    addToCardBtn.addEventListener("click", () => {
      const size = document.querySelector(".selected-size")?.textContent;
      if (!size) {
        return alert("You need to select a size before");
      }
      // addToCardBtn.disabled = true;

      const cart = CartCookiesClient.addItem({
        // para añadir a las cookies
        productId: productIdInput.value,
        size: size,
        quantity: quantity,
      });

      // console.log({
      //   id: productIdInput.value,
      //   size: size,
      //   quantity: quantity,
      // });
      itemInCart.set(cart.length);
      // console.log(itemInCart.get());
      // window.location.href = "/cart";
      navigate("/cart"); // esto es para hacer la transición con astro de manera bonita
    });
  });
</script>

<style>
  h3 {
    @apply font-bold;
  }

  li {
    @apply hover:underline cursor-pointer;
  }

  .selected-size {
    @apply text-blue-500 underline font-bold transition-all;
  }

  .btn-quantity {
    @apply w-10 text-center p-2 border border-gray-300 hover:bg-gray-100 cursor-pointer;
  }

  input {
    @apply w-16 text-center p-2 border border-gray-300;
  }

  input[type="number"]::-webkit-outer-spin-button,
  input[type="number"]::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  input[type="number"] {
    -moz-appearance: textfield; /* Para Firefox */
  }
</style>
