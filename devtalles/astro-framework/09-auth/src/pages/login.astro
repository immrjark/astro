---
import CopyrightAndDate from "@/components/shared/CopyrightAndDate.astro";
import AuthLayout from "@/layoputs/AuthLayout.astro";

const email = Astro.cookies.get("email")?.value ?? ""; // con esto puedo recuperar con astro el email que he guardado en la cookie
// console.log(email);
const rememberMe = !!email; // para transformarlo a valor boolean -> si existe dará true y sino false
---

<AuthLayout>
  <div class="flex justify-center self-center z-10">
    <div class="p-12 bg-white mx-auto rounded-2xl w-100">
      <div class="mb-4">
        <h3 class="font-semibold text-2xl text-gray-800">LogIn</h3>
        <p class="text-gray-500">Please sign in to your account.</p>
      </div>
      <form class="space-y-5">
        <div class="space-y-2">
          <label class="text-sm font-medium text-gray-700 tracking-wide"
            >Email</label
          >
          <input
            value={email}
            class="w-full text-base px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-green-400"
            type="email"
            name="email"
            placeholder="mail@gmail.com"
          />
        </div>
        <div class="space-y-2">
          <label class="mb-5 text-sm font-medium text-gray-700 tracking-wide">
            Password
          </label>
          <input
            class="w-full content-center text-base px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:border-green-400"
            type="password"
            name="password"
            placeholder="Enter your password"
          />
        </div>
        <div class="flex flex-col items-left justify-between">
          <div class="flex items-center mb-6">
            <input
              id="remember_me"
              name="remember_me"
              type="checkbox"
              checked={rememberMe}
              class="h-4 w-4 bg-blue-500 focus:ring-blue-400 border-gray-300 rounded"
            />
            <label for="remember_me" class="ml-2 block text-sm text-gray-800">
              Remember me
            </label>
          </div>
          <div class="text-sm">
            <a href="/signup" class="text-green-400 hover:text-green-500">
              Do you have an account?
            </a>
          </div>
        </div>
        <div>
          <button
            id="btn-login"
            type="submit"
            class="disabled:bg-gray-400 w-full flex justify-center bg-green-400 hover:bg-green-500 text-gray-100 p-3 rounded-full tracking-wide font-semibold shadow-lg cursor-pointer transition ease-in duration-500"
          >
            Sign in with email
          </button>
          <div class="flex flex-1 w-full my-2">
            <div class="w-full border-t-2 border-gray-500"></div>
          </div>
          <button
            id="btn-google"
            type="button"
            class="disabled:bg-gray-400 w-full flex justify-center border-2 border-red-400 text-neutral-800 p-3 rounded-full tracking-wide font-semibold shadow-lg cursor-pointer transition ease-in duration-500"
          >
            Sign in with Google</button
          >
        </div>
      </form>
      <CopyrightAndDate />
    </div>
  </div></AuthLayout
>

<script>
  import { firebase } from "@/firebase/config";
  import { actions } from "astro:actions";
  import { GoogleAuthProvider, signInWithPopup } from "firebase/auth";
  import { log } from "node_modules/astro/dist/core/logger/core";
  import Swal from "sweetalert2";

  const form = document.querySelector("form") as HTMLFormElement;
  const btnLogin = document.querySelector("#btn-login") as HTMLButtonElement;
  const btnLoginGoogle = document.querySelector(
    "#btn-google",
  ) as HTMLButtonElement;

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    btnLogin.setAttribute("disabled", "disabled");

    const fromData = new FormData(form);
    const { error } = await actions.logInUser(fromData);

    if (error) {
      Swal.fire({
        icon: "error",
        title: "Login error",
        text: error.message,
      });
      btnLogin.removeAttribute("disabled");
      return;
    }
    window.location.replace("/private");
  });

  btnLoginGoogle.addEventListener("click", async () => {
    btnLoginGoogle.setAttribute("disabled", "disabled");

    const provider = new GoogleAuthProvider();

    try {
      // este signin es propio de firebase, por ende, si queires saber como se usa, tienes que aprender a usar firebase
      // Paso 1: obtener las credenciales del lado del cliente
      const credentials = await signInWithPopup(firebase.auth, provider);
      // console.log("credential:", credentials);

      // paso 2: verificar las credenciales en el lado del backend
      // este paso es importate porque con esto haces que el usuario tenga que entrar a su correo y verificar lo que hace que sea más dificil suplantar la identidad
      const { error } = await actions.loginWithGoogle(credentials);

      if (error) {
        alert(error.message);
        btnLoginGoogle.removeAttribute("disabled");
        return;
      }

      btnLoginGoogle.innerText = "Redirecting...";
      window.location.replace("/private");
    } catch (error) {
      console.log(error);
    }

    btnLoginGoogle.removeAttribute("disabled");
  });
</script>
